/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});


Ext.application({

    requires: [
        'Ext.ux.Router',
        'Ext.layout.container.Border',
        'Ext.window.MessageBox',
        'Ext.layout.container.Column'
    ],
    enableRouter: true,
    routes: {
        '/': 'home#index',
        login: 'login#Index',
        about: 'about#Index',
        signup: 'signup#Index',
        myprofile: 'myprofile#Index',
        changepassword: 'changepassword#Index',
        myplan: 'myplan#Index',
        txnhistory: 'txnhistory#Index',
        forgotpassword: 'forgotpassword#Index',
        customers: 'customers#Index',
        plans: 'plans#Index',
        sales: 'sales#Index',
        feedbacks: 'feedbacks#Index',
        support: 'support#Index',
        passrecovery: 'passrecovery#Index',
        accountconfirm: 'accountconfirm#Index'
    },
    autoCreateViewport: true,
    models: [
        'PackageDropDown'
    ],
    stores: [
        'PackageDropDown',
        'MyPlan.Selected',
        'MyPlan.UnSelected',
        'TraxnHistory'
    ],
    views: [
        'login.Index',
        'Viewport',
        'about.Index',
        'signup.Index',
        'myprofile.Index',
        'changepassword.Index',
        'myplan.Index',
        'txnhistory.Index',
        'forgotpassword.Index',
        'customers.Index',
        'plans.Index',
        'sales.Index',
        'feedbacks.Index',
        'support.Index',
        'passrecovery.Index',
        'accountconfirm.Index'
    ],
    controllers: [
        'Home',
        'Login',
        'About',
        'Signup',
        'Myprofile',
        'Logout',
        'BaseSession',
        'Changepassword',
        'Myplan',
        'Txnhistory',
        'Forgotpassword',
        'customers',
        'plans',
        'sales',
        'feedbacks',
        'support',
        'passrecovery',
        'accountconfirm'
    ],
    name: 'MyApp',

    launch: function() {
         /*
                 * Ext.ux.Router provides some events for better controlling
                 * dispatch flow
                 */

        //var loogedUserName =  Ext.state.Manager.get("loggedUserName");
        //alert('on Laun'+loogedUserName);
        // var viewport1    = Ext.getCmp('viewport'),
          //                  target1      = viewport1.down('#contentPanel');
        //Ext.apply(Ext.getCmp('contentPanel'), {pack: 'start'});
        //Ext.getCmp('contentPanel').doLayout();
        //Ext.apply(viewport1.down('#contentPanel')[0],  {layout:{pack: 'start'}});

                Ext.ux.Router.on({

                    routemissed: function(token) {
                        Ext.Msg.show({
                            title:'Error 404',
                            msg: 'Route not found: ' + token,
                            buttons: Ext.Msg.OK,
                            icon: Ext.Msg.ERROR
                        });
                    },

                    beforedispatch: function(token, match, params) {
                        Ext.log('beforedispatch ' + token);
                    },

                    /**
                     * For this example I'm using the dispatch event to render the view
                     * based on the token. Each route points to a controller and action.
                     * Here I'm using these 2 information to get the view and render.
                     * Example:
                     *
                     *  users/:id/edit -> controller Users, action edit ->
                     *  renders user.Edit view.
                     */
                    dispatch: function(token, match, params, controller) {

                           var view, viewClass, action,
                            viewport    = Ext.getCmp('viewport'),
                            target      = viewport.down('#contentPanel');
                            navToolbar  = viewport.down('#menuPanel');
                           sideMenu  = navToolbar.down('#sideMenu');


                        // adjust controller and action names
                        action      = Ext.String.capitalize(match.action);
                        controller  = match.controller.charAt(0).toLowerCase() + match.controller.substr(1);

                        // try to get the view by controller + action names
                        viewClass   = Ext.ClassManager.get('MyApp.view.' + controller + '.' + action);

                        if (viewClass) {

                            // create view
                            view = Ext.create(viewClass, {
                                border: false
                            });

                            // clear target and add new view
                            target.removeAll();
                            target.add(view);

                            // adjust top toolbar

                           // var okk =   sideMenu.child('#Myprofile');
                           // alert(controller);
                            if (sideMenu.child('#' + controller)) {
                                sideMenu.setActiveItem(sideMenu.child('#' + controller));
                            }
                        }
                    }
                });
    }

});
